function DihedralGenerators(H)
    for a in H do 
        for b in H do 
            if Order(a) eq #H/2 and Order(b) eq 2 then 
                H1 := sub<H | a,b>;
                if #H1 eq #H then 
                    return a,b;
                end if;
            end if;
        end for;
    end for;
    "logical error";
end function;

n := 4;
m := 6;
list := SmallGroups(4*n*m,func<G|not IsAbelian(G) and IsSolvable(G)>);


//list2 is a list of group which contains at least one dihedral subgroup
//find all group G which contains D2n and D2m. Save it in the list2.
list2 := [];
for G in list do
    subgroupsList_H := [K`subgroup : K in Subgroups(G : OrderEqual := 2*n) | IsSolvable(K`subgroup) and not IsAbelian(K`subgroup)];
    subgroupsList_K := [K`subgroup : K in Subgroups(G : OrderEqual := 2*m) | IsSolvable(K`subgroup) and not IsAbelian(K`subgroup)];
    flag_1 := 0;
    flag_2 := 0;
    for H in subgroupsList_H do
        if(IsIsomorphic(H,DihedralGroup(n))) then
            flag_1 := 1;
            break;
        end if;
    end for;
    if flag_1 eq 0 then 
        continue G;
    end if;
    for K in subgroupsList_K do
        if(IsIsomorphic(K,DihedralGroup(m))) then
            flag_2 := 1;
            break;
        end if;
    end for;
    if flag_1 eq 1 and flag_2 eq 1 then
        Append(~list2,G);
    end if;
end for;



//seqs is a list for the result
count := 0;
seqs := [];
indexsOfExactProduct := [];
for G in list2 do 
    count := count +1;
    //count;//for debug.
    dihedralsForG := [];// This is for saving the exact product H and K for given G,element is a list
    sub_2n := [K`subgroup : K in Subgroups(G : OrderEqual := 2*n) | IsSolvable(K`subgroup) and not IsAbelian(K`subgroup)];
    sub_2m := [K`subgroup : K in Subgroups(G : OrderEqual := 2*m) | IsSolvable(K`subgroup) and not IsAbelian(K`subgroup)];
    subD2n := [];
    subD2m := [];
    
    
    for sub1 in sub_2n do
        if IsIsomorphic(sub1,DihedralGroup(n)) then
            Append(~subD2n,sub1);
        end if;
    end for;
    
    //so we would not run all over all the subD2m because we will stop by the first one that satisfies G = HK.
    for sub2 in sub_2m do
        for sub1 in subD2n do
            if #(sub1 meet sub2) eq 1 then
                if IsIsomorphic(sub2,DihedralGroup(m)) then
                    Append(~dihedralsForG,[sub1,sub2]);
                    break sub2;
                end if;
            end if;
        end for;
    end for;

    
    
    //deal with G with H and K already found.
    if #dihedralsForG ne 0 then
        Append(~indexsOfExactProduct,count);
    end if;
end for;


//test
/*
G := list2[12];
dihedralsForG := [];// This is for saving the exact product H and K for given G,element is a list
sub_2n := [K`subgroup : K in Subgroups(G : OrderEqual := 2*n)];
sub_2m := [K`subgroup : K in Subgroups(G : OrderEqual := 2*m)];
subD2n := [];
subD2m := [];
for sub1 in sub_2n do
    if IsIsomorphic(sub1,DihedralGroup(n)) then
        Append(~subD2n,sub1);
    end if;
end for;
for sub2 in sub_2m do
    if IsIsomorphic(sub2,DihedralGroup(m)) then
        Append(~subD2m,sub2);
    end if;
end for;
for sub1 in subD2n do
    for sub2 in subD2m do
        if #(sub1 meet sub2) eq 1 then
            Append(~dihedralsForG,[sub1,sub2]);
            break sub1;
        end if;
    end for;
end for;


H := dihedralsForG[1][1];
K := dihedralsForG[1][2];

//now we get G,H,K


//1. construct a list
test := [K`subgroup : K in Subgroups(G : OrderEqual := 2*n) | IsSolvable(K`subgroup) and not IsAbelian(K`subgroup)];

//2. test time cost compare meet and IsIsomorphic

//this is about 2s
test_list3 := [];
for i in [1 .. 100000] do
    Append(~test_list3,#(H meet K));
end for;


//this is about 50s
test_list3 := [];
for i in [1 .. 100000] do
    Append(~test_list3,IsIsomorphic(H,DihedralGroup(n)));
end for;






*/